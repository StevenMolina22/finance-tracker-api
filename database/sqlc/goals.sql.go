// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: goals.sql

package sqlc

import (
	"context"
	"time"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO
    goals (
        user_id,
        type,
        amount,
        start_date,
        end_date,
        status
    )
VALUES
    (?, ?, ?, ?, ?, ?) RETURNING id, user_id, type, amount, start_date, end_date, status
`

type CreateGoalParams struct {
	UserID    int64     `json:"user_id"`
	Type      string    `json:"type"`
	Amount    float64   `json:"amount"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Status    string    `json:"status"`
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goal, error) {
	row := q.db.QueryRowContext(ctx, createGoal,
		arg.UserID,
		arg.Type,
		arg.Amount,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const deleteGoal = `-- name: DeleteGoal :one
DELETE FROM goals
WHERE
    id = ? RETURNING id, user_id, type, amount, start_date, end_date, status
`

func (q *Queries) DeleteGoal(ctx context.Context, id int64) (Goal, error) {
	row := q.db.QueryRowContext(ctx, deleteGoal, id)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getGoal = `-- name: GetGoal :one
SELECT
    id, user_id, type, amount, start_date, end_date, status
FROM
    goals
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetGoal(ctx context.Context, id int64) (Goal, error) {
	row := q.db.QueryRowContext(ctx, getGoal, id)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getGoalsByUserId = `-- name: GetGoalsByUserId :many
SELECT
    id, user_id, type, amount, start_date, end_date, status
FROM
    goals
WHERE
    user_id = ?
ORDER BY
    start_date
`

func (q *Queries) GetGoalsByUserId(ctx context.Context, userID int64) ([]Goal, error) {
	rows, err := q.db.QueryContext(ctx, getGoalsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goal
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Amount,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGoals = `-- name: ListGoals :many
SELECT
    id, user_id, type, amount, start_date, end_date, status
FROM
    goals
ORDER BY
    start_date
`

func (q *Queries) ListGoals(ctx context.Context) ([]Goal, error) {
	rows, err := q.db.QueryContext(ctx, listGoals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goal
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Amount,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE goals
SET
    user_id = ?,
    type = ?,
    amount = ?,
    start_date = ?,
    end_date = ?,
    status = ?
WHERE
    id = ? RETURNING id, user_id, type, amount, start_date, end_date, status
`

type UpdateGoalParams struct {
	UserID    int64     `json:"user_id"`
	Type      string    `json:"type"`
	Amount    float64   `json:"amount"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Status    string    `json:"status"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Goal, error) {
	row := q.db.QueryRowContext(ctx, updateGoal,
		arg.UserID,
		arg.Type,
		arg.Amount,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.ID,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}
