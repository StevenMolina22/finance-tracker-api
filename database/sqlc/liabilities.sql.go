// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: liabilities.sql

package sqlc

import (
	"context"
)

const createLiability = `-- name: CreateLiability :one
INSERT INTO
    liabilities (user_id, name, amount)
VALUES
    (?, ?, ?) RETURNING id, user_id, name, amount
`

type CreateLiabilityParams struct {
	UserID int64   `json:"user_id"`
	Name   string  `json:"name"`
	Amount float64 `json:"amount"`
}

func (q *Queries) CreateLiability(ctx context.Context, arg CreateLiabilityParams) (Liability, error) {
	row := q.db.QueryRowContext(ctx, createLiability, arg.UserID, arg.Name, arg.Amount)
	var i Liability
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const deleteLiability = `-- name: DeleteLiability :one
DELETE FROM liabilities
WHERE
    id = ? RETURNING id, user_id, name, amount
`

func (q *Queries) DeleteLiability(ctx context.Context, id int64) (Liability, error) {
	row := q.db.QueryRowContext(ctx, deleteLiability, id)
	var i Liability
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const getLiability = `-- name: GetLiability :one
SELECT
    id, user_id, name, amount
FROM
    liabilities
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetLiability(ctx context.Context, id int64) (Liability, error) {
	row := q.db.QueryRowContext(ctx, getLiability, id)
	var i Liability
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const listLiabilities = `-- name: ListLiabilities :many
SELECT
    id, user_id, name, amount
FROM
    liabilities
ORDER BY
    name
`

func (q *Queries) ListLiabilities(ctx context.Context) ([]Liability, error) {
	rows, err := q.db.QueryContext(ctx, listLiabilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Liability
	for rows.Next() {
		var i Liability
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLiability = `-- name: UpdateLiability :one
UPDATE liabilities
SET
    user_id = ?,
    name = ?,
    amount = ?
WHERE
    id = ? RETURNING id, user_id, name, amount
`

type UpdateLiabilityParams struct {
	UserID int64   `json:"user_id"`
	Name   string  `json:"name"`
	Amount float64 `json:"amount"`
	ID     int64   `json:"id"`
}

func (q *Queries) UpdateLiability(ctx context.Context, arg UpdateLiabilityParams) (Liability, error) {
	row := q.db.QueryRowContext(ctx, updateLiability,
		arg.UserID,
		arg.Name,
		arg.Amount,
		arg.ID,
	)
	var i Liability
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}
