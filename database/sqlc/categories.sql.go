// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO
    categories (name, description)
VALUES
    (?, ?) RETURNING id, name, description
`

type CreateCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :one
DELETE FROM categories
WHERE
    id = ? RETURNING id, name, description
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, deleteCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT
    id, name, description
FROM
    categories
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT
    id, name, description
FROM
    categories
ORDER BY
    name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = ?,
    description = ?
WHERE
    id = ? RETURNING id, name, description
`

type UpdateCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.Name, arg.Description, arg.ID)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
