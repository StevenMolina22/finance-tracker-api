// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transactions.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO
    transactions (
        user_id,
        category_id,
        name,
        amount,
        description,
        type,
        date
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?) RETURNING id, user_id, category_id, name, amount, description, type, date, created_at, updated_at
`

type CreateTransactionParams struct {
	UserID      int64          `json:"user_id"`
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Amount      float64        `json:"amount"`
	Description sql.NullString `json:"description"`
	Type        string         `json:"type"`
	Date        time.Time      `json:"date"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.CategoryID,
		arg.Name,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Name,
		&i.Amount,
		&i.Description,
		&i.Type,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :one
DELETE FROM transactions
WHERE
    id = ? RETURNING id, user_id, category_id, name, amount, description, type, date, created_at, updated_at
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, deleteTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Name,
		&i.Amount,
		&i.Description,
		&i.Type,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT
    id, user_id, category_id, name, amount, description, type, date, created_at, updated_at
FROM
    transactions
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Name,
		&i.Amount,
		&i.Description,
		&i.Type,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT
    id, user_id, category_id, name, amount, description, type, date, created_at, updated_at
FROM
    transactions
ORDER BY
    date
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Name,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
    user_id = ?,
    category_id = ?,
    name = ?,
    amount = ?,
    description = ?,
    type = ?,
    date = ?
WHERE
    id = ? RETURNING id, user_id, category_id, name, amount, description, type, date, created_at, updated_at
`

type UpdateTransactionParams struct {
	UserID      int64          `json:"user_id"`
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Amount      float64        `json:"amount"`
	Description sql.NullString `json:"description"`
	Type        string         `json:"type"`
	Date        time.Time      `json:"date"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.UserID,
		arg.CategoryID,
		arg.Name,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Name,
		&i.Amount,
		&i.Description,
		&i.Type,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
